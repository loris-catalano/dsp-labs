openapi: 3.0.4
info:
  title: Film Manager - OpenAPI 3.0
  description: This is a Film Manager Server based on the OpenAPI 3.0 specification.
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: https://swagger.io
servers:
- url: https://filmmanager.swagger.io/api/v1
tags:
- name: user
  description: A user of the film manager system
- name: film
  description: A film in the system
- name: review
  description: A review of a film
paths:
  /users:
    post:
      tags:
      - user
      summary: Create user.
      description: Create user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/xml:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: User
  /users/login:
    get:
      tags:
      - user
      summary: Logs user into the system.
      description: Log into the system.
      operationId: loginUser
      parameters:
      - name: email
        in: query
        description: The email for login
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              style: simple
              explode: false
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
                x-content-type: application/xml
            application/json:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: User
  /users/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session.
      description: Log user out of the system.
      operationId: logoutUser
      parameters: []
      responses:
        "200":
          description: successful operation
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: User
  /users/{username}:
    get:
      tags:
      - user
      summary: Get user by user name.
      description: Get user detail based on username.
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: The name that needs to be fetched. Use user1 for testing
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: User
    put:
      tags:
      - user
      summary: Update user resource.
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/xml:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: successful operation
        "400":
          description: bad request
        "404":
          description: user not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: User
    delete:
      tags:
      - user
      summary: Delete user resource.
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: User deleted
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: User
  /films:
    get:
      tags:
      - film
      summary: Get all films you created.
      description: Get all films you created in the system.
      operationId: getAllFilmsCreated
      parameters: []
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Film"
                x-content-type: application/json
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: Film
    post:
      tags:
      - film
      summary: Add a new film to the system.
      description: Add a new film to the system.
      operationId: createFilm
      requestBody:
        description: Create a new film in the system
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Film"
          application/xml:
            schema:
              $ref: "#/components/schemas/Film"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Film"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Film"
            application/xml:
              schema:
                $ref: "#/components/schemas/Film"
        "400":
          description: Invalid input
        "422":
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: Film
    patch:
      tags:
      - film
      summary: Patch an existing film in the system.
      description: Patch an existing film in the system. Changing visibility from
        public to private is not allowed.
      operationId: patchFilm
      requestBody:
        description: Patch an existent film in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Film"
          application/xml:
            schema:
              $ref: "#/components/schemas/Film"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Film"
      responses:
        "200":
          description: successful operation
        "400":
          description: bad request
        "404":
          description: film not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: Film
  /films/invited:
    get:
      tags:
      - film
      summary: Get all films you are invited to review.
      description: Get all films you are invited to review in the system.
      operationId: getAllFilmsInvited
      parameters: []
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Film"
                x-content-type: application/json
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: Film
  /reviews/assignments:
    post:
      tags:
      - review
      summary: Automatically assign review invitations.
      description: "Automatically issues review invitations for all public films without\
        \ any existing invitations. The invitations are distributed evenly among all\
        \ users in the system, ensuring each user receives approximately the same\
        \ number of invitations. Only films owned by users and marked as public are\
        \ considered."
      operationId: autoAssignReviews
      requestBody:
        description: Optional parameters for auto-assignment
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/reviews_assignments_body"
        required: false
      responses:
        "201":
          description: Review invitations assigned successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_201"
        "400":
          description: Bad request - invalid parameters
        "404":
          description: No films available for review assignment
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: Review
  /films/{id}:
    get:
      tags:
      - film
      summary: Get film by ID.
      description: Get film detail based on film ID.
      operationId: getFilmById
      parameters:
      - name: id
        in: path
        description: The ID that needs to be fetched. Use 'tt0111161' for testing
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Film"
        "400":
          description: Invalid ID supplied
        "404":
          description: Film not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: Film
    delete:
      tags:
      - film
      summary: Delete film by ID.
      description: Delete film in the system by ID. You can only delete films you
        own.
      operationId: deleteFilm
      parameters:
      - name: id
        in: path
        description: The ID that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Film deleted
        "400":
          description: Invalid ID supplied
        "404":
          description: Film not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: Film
  /films/{filmId}/reviews:
    get:
      tags:
      - review
      summary: Get all review invitations for a film.
      description: Retrieve all review invitations issued for a specific film.
      operationId: getFilmReviews
      parameters:
      - name: filmId
        in: path
        description: ID of the film to get review invitations for
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Review"
                x-content-type: application/json
        "404":
          description: Film not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: Review
    post:
      tags:
      - review
      summary: Issue review invitations for a public film.
      description: The owner of a public film can issue review invitations to one
        or more users. The reviewer may be the owner herself.
      operationId: issueFilmReviews
      parameters:
      - name: filmId
        in: path
        description: ID of the film to issue review invitations for
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Array of reviewer IDs to invite
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/filmId_reviews_body"
        required: true
      responses:
        "201":
          description: Review invitations created successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Review"
                x-content-type: application/json
        "400":
          description: Invalid input
        "403":
          description: Forbidden - only the owner can issue review invitations
        "404":
          description: Film not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: Review
  /films/{filmId}/reviews/{reviewerId}:
    get:
      tags:
      - review
      summary: Get a specific review invitation.
      description: Retrieve a specific review invitation for a film and reviewer.
      operationId: getFilmReview
      parameters:
      - name: filmId
        in: path
        description: ID of the film
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: reviewerId
        in: path
        description: ID of the reviewer
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Review"
        "404":
          description: Review invitation not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: Review
    put:
      tags:
      - review
      summary: Complete a review invitation.
      description: "A reviewer can mark their review as completed, updating the review\
        \ date, rating, and textual description."
      operationId: completeReview
      parameters:
      - name: filmId
        in: path
        description: ID of the film
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: reviewerId
        in: path
        description: ID of the reviewer
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Review completion data
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/reviews_reviewerId_body"
        required: true
      responses:
        "200":
          description: Review completed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Review"
        "400":
          description: Invalid input
        "403":
          description: Forbidden - only the invited reviewer can complete the review
        "404":
          description: Review invitation not found
        "409":
          description: Review already completed
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: Review
    delete:
      tags:
      - review
      summary: Remove a review invitation.
      description: The owner of a film can remove a review invitation if the review
        has not yet been completed.
      operationId: deleteReviewInvitation
      parameters:
      - name: filmId
        in: path
        description: ID of the film
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: reviewerId
        in: path
        description: ID of the reviewer
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Review invitation deleted successfully
        "403":
          description: Forbidden - only the film owner can delete review invitations
        "404":
          description: Review invitation not found
        "409":
          description: Conflict - cannot delete a completed review
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: Review
components:
  schemas:
    Film:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the film
        title:
          type: string
          description: Title of the film
        owner:
          type: string
          description: Identifier of the user who owns the film
        private:
          type: boolean
          description: Whether the film is private or public
        watchDate:
          type: string
          description: Date when the film was watched
          format: date
        rating:
          maximum: 10
          minimum: 0
          type: integer
          description: Rating of the film (0-10)
        favorite:
          type: boolean
          description: Whether the film is marked as favorite
          default: false
        self:
          type: string
          description: Link to the film resource
          format: uri
      example:
        owner: owner
        private: true
        watchDate: 2000-01-23
        rating: 0
        self: http://example.com/aeiou
        id: id
        title: title
        favorite: false
    Review:
      required:
      - completed
      - filmId
      - reviewerId
      type: object
      properties:
        filmId:
          type: string
          description: Unique identifier of the film for which a review invitation
            has been issued
        reviewerId:
          type: string
          description: Unique identifier of the user who has received the review invitation
        completed:
          type: boolean
          description: Whether the review has been completed
        reviewDate:
          type: string
          description: Date when the invited user completed the review (YYYY-MM-DD)
          format: date
        rating:
          maximum: 10
          minimum: 0
          type: integer
          description: Rating of the completed review (0-10)
        review:
          maxLength: 1000
          type: string
          description: Textual description of the review (<= 1000 characters)
        self:
          type: string
          description: Link to the film resource
          format: uri
      example:
        reviewerId: reviewerId
        reviewDate: 2000-01-23
        review: review
        filmId: filmId
        rating: 1
        self: http://example.com/aeiou
        completed: true
      allOf:
      - oneOf:
        - required:
          - completed
          - rating
          - review
          - reviewDate
          properties:
            completed:
              type: boolean
              enum:
              - true
        - required:
          - completed
          not:
            anyOf:
            - required:
              - reviewDate
            - required:
              - rating
            - required:
              - review
          properties:
            completed:
              type: boolean
              enum:
              - false
    User:
      required:
      - email
      - id
      - name
      - password
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the user
        name:
          minLength: 1
          type: string
          description: Username of the user
        email:
          type: string
          description: Email of the user
          format: email
        password:
          maxLength: 20
          minLength: 6
          type: string
          description: Password of the user
        self:
          type: string
          description: Link to the user resource
          format: uri
      additionalProperties: false
      example:
        password: password
        name: name
        self: http://example.com/aeiou
        id: id
        email: ""
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
        self:
          type: string
          description: Link to the user resource
          format: uri
      xml:
        name: "##default"
    Error:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        self:
          type: string
          description: Link to the user resource
          format: uri
    reviews_assignments_body:
      type: object
      properties:
        reviewersPerFilm:
          minimum: 1
          type: integer
          description: "Number of reviewers to assign per film (default: 3)"
          default: 3
    inline_response_201:
      type: object
      properties:
        assignedReviews:
          type: integer
          description: Total number of review invitations created
        filmsProcessed:
          type: integer
          description: Number of films that received review invitations
        reviews:
          type: array
          description: Array of created review invitations
          items:
            $ref: "#/components/schemas/Review"
      example:
        assignedReviews: 0
        filmsProcessed: 6
        reviews:
        - reviewerId: reviewerId
          reviewDate: 2000-01-23
          review: review
          filmId: filmId
          rating: 1
          self: http://example.com/aeiou
          completed: true
        - reviewerId: reviewerId
          reviewDate: 2000-01-23
          review: review
          filmId: filmId
          rating: 1
          self: http://example.com/aeiou
          completed: true
    filmId_reviews_body:
      required:
      - reviewers
      type: object
      properties:
        reviewers:
          type: array
          description: Array of user IDs to invite for review
          items:
            type: string
    reviews_reviewerId_body:
      required:
      - completed
      - rating
      - review
      - reviewDate
      type: object
      properties:
        completed:
          type: boolean
          description: Must be true to complete the review
        reviewDate:
          type: string
          description: Date when the review was completed (YYYY-MM-DD)
          format: date
        rating:
          maximum: 10
          minimum: 0
          type: integer
          description: Rating of the film (0-10)
        review:
          maxLength: 1000
          type: string
          description: Textual description of the review (<= 1000 characters)
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
